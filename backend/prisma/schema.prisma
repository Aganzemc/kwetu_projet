generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  isOnline  Boolean  @default(false)
  createdGroups Group[]
  groupMemberships GroupMember[]
  sentMessages     Message[]    @relation("MessagesSent")
  receivedMessages Message[]    @relation("MessagesReceived")
  groupJoinRequests GroupJoinRequest[]
}

model Group {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  creatorId Int
  creator   User     @relation(fields: [creatorId], references: [id])
  members   GroupMember[]
  messages  Message[]
  joinRequests GroupJoinRequest[]
}

model GroupMember {
  id        Int      @id @default(autoincrement())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  joinedAt  DateTime @default(now())

  @@unique([groupId, userId])
}

model Message {
  id          Int      @id @default(autoincrement())
  sender      User     @relation("MessagesSent", fields: [senderId], references: [id])
  senderId    Int
  recipient   User?    @relation("MessagesReceived", fields: [recipientId], references: [id])
  recipientId Int?
  group       Group?   @relation(fields: [groupId], references: [id])
  groupId     Int?
  content     String
  createdAt   DateTime @default(now())
  deliveredAt DateTime?
  readAt      DateTime?
}

model GroupJoinRequest {
  id        Int      @id @default(autoincrement())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  status    String   @default("pending") // pending | approved | rejected
  createdAt DateTime @default(now())

  @@unique([groupId, userId])
}
